#!/bin/bash
################################################################################################
# Function  : Manage the docker command line
# Version   : See below --version section
# Copyright : Copyright (c) 2020 Reid Liu <guliu@redhat.com>
# Author    : Reid Liu <guliu@redhat.com>
# License   : https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3
#################################################################################################

DOCKER_EXEC_CMD='docker exec -i'                                 # docker exec command
CONTAINER_ID=$(docker ps | grep _openemr | cut -f 1 -d " ")      # get the container id
SHELL_TYPE='sh -c'                                               # specify shell type
FIRST_ARG=$1											         # define the first parameter
DEV_TOOLS=/root/devtools

check_docker_compose_install_or_not(){
	DOCKER_COMPOSE_CODE=22
	which docker-compose &>/dev/null
	[ $? -ne 0 ] && echo "Please check docker-compose install or not." && exit $DOCKER_COMPOSE_CODE
}

quick_open_a_docker_shell(){
	CONTAINER_NAME=$1
	CONTAINER_NAME_CODE=24	
	if [ $# -eq 1 ]
	then	
		docker exec -it $CONTAINER_NAME sh
	else
		echo '********************************************************'
		echo 'Access the docker *_openemr_1 by default.' 
		echo 'Please provide docker names/id if access other dockers.'
		echo "e.g `basename $0` shell <docker names>"
		echo '********************************************************'
		docker exec -it $CONTAINER_ID sh
	fi
}

execute_command_flexible(){
	if [ $# -lt 3 ]
	then
		echo "Please provide the container name and the command."	
		echo "e.g. `basename $0` [exec|-e] openemr_openemr_1 tail -f /var/log/apache2/error.log"
	else
		shift
		docker exec -it "$@"
	fi
}

check_docker_log() {
  docker logs $CONTAINER_ID
}

check_docker_names() {
	CHECK_NAME=$1     # specify the checking name
	if [ $# -eq 1 ]
	then
		# ARGS: couchdb php fhir mariadb mysql nginx openemr openldap orthanc redis.
		echo '=======Running Docker Names======='
		docker ps | awk '{print $NF}'|grep -v NAMES|sort -n | grep $CHECK_NAME		

	else
		# Show all the docker names.
		echo '***************************************************************'
		echo 'Show all the docker names by default.' 
		echo 'Please provide the keyword if you want to check the single one.'
		echo "e.g `basename $0` [docker-names|dn] php"
		echo '***************************************************************'
		echo '=======Running Docker Names======='
		docker ps | awk '{print $NF}'|grep -v NAMES|sort -n
	fi
}

creat_a_backup_snapshot(){
    BACKUP_FILE=$1
    BACKUP_FILE_CODE=20
    if [ $# != 1 ]
    then
		echo 'Please provide a snapshot name.'
		echo 'e.g. openemr-cmd [backup-snapshot|bs] example'
		exit $BACKUP_FILE_CODE
	else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS backup $BACKUP_FILE"
	fi
}

restore_from_a_snapshot(){
    BACKUP_FILE=$1
    BACKUP_FILE_CODE=21
    if [ $# != 1 ]
    then
        echo 'Please provide a restore snapshot name.'
        echo 'e.g. openemr-cmd [restore-snapshot|rs] example'
        exit $BACKUP_FILE_CODE
    else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS restore $BACKUP_FILE"
	fi
}

copy_capsule_from_docker_to_host(){
	BACKUP_FILE=$1
	BACKUP_HOST_DIR=$2 #optional parameter
	BACKUP_FILE_CODE=19
	if [ $# != 1 ] && [ $# != 2 ]
	then
		echo 'Please provide the capsule name.'
		echo 'e.g. openemr-cmd [get-capsule|gc] example.tgz'
		echo 'An optional setting is the path to save to. If nothing provided, then will save in current directory.'
		echo 'e.g. openemr-cmd [get-capsule|gc] example.tgz /path/to/save'
		exit $BACKUP_FILE_CODE
	else
	  if [ -z "$BACKUP_HOST_DIR" ]
	  then
		  docker cp $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/$BACKUP_FILE .
    else
      docker cp $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/$BACKUP_FILE "${BACKUP_HOST_DIR}/"
    fi
	fi
}

copy_capsule_from_host_to_docker(){
	# Need a capsule parameter
	BACKUP_FILE=$1
	CP_CAP_DIR_DKR_CODE=15
	BACKUP_FILE_CODE=18
	if [ $# != 1 ]
	then
		echo 'Please provide the capsule file name (including path if applicable).'
		echo 'e.g. openemr-cmd [put-capsule|pc] example.tgz'
		exit $BACKUP_FILE_CODE
	else
		ls $BACKUP_FILE  &>/dev/null
		if [ $? -ne 0 ]
		then
			echo 'Please check whether the capsule file exists or not'
			exit $CP_CAP_DIR_DKR_CODE
		else
			docker cp $BACKUP_FILE  $(docker ps | grep _openemr | cut -f 1 -d " "):/snapshots/
		fi
	fi
}

ensure_current_ver_with_upgrade_ver(){
  # Need a version parameter
  UPGRADE_FROM_VERSION=$1
  BACKUP_FILE_CODE=22
	if [ $# != 1 ]
	then
		echo 'Please provide the OpenEMR version to upgrade database from.'
		echo 'e.g. openemr-cmd [ensure-version|ev] 5.0.2'
		exit $BACKUP_FILE_CODE
	else
    $DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS upgrade ${UPGRADE_FROM_VERSION}"
	fi
}

change_db_character_set_and_collation(){
	CHARACTER_SET_COLLATION_CODE=17
	if [ $# != 2 ]
	then
		echo 'Please provide two parameters.'
		echo 'e.g. openemr-cmd encoding-collation utf8mb4 utf8mb4_general_ci'
		echo '     openemr-cmd encoding-collation utf8mb4 utf8mb4_unicode_ci'
		echo '     openemr-cmd encoding-collation utf8mb4 utf8mb4_vietnamese_ci'
		echo '     openemr-cmd encoding-collation utf8 utf8_general_ci'
		exit $CHARACTER_SET_COLLATION_CODE
	else
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS change-encoding-collation $1 $2"
	fi
}

USAGE_EXIT_CODE=13
FINAL_EXIT_CODE=0

# Confirm the docker install or not.
DOCKER_CODE=16
which docker &>/dev/null
[ $? -ne 0 ] && echo "Please check docker install or not." && exit $DOCKER_CODE

# Script usage.
if [ $# -eq 0 ] || [ "$FIRST_ARG" == '--help' ] || [ "$FIRST_ARG" == '-h' ]
then
  echo "Usage: `basename $0` COMMAND [ARGS]"
  echo 'Commands:'
  echo "  -h, --help                         Show the commands usage"
  echo "  -v, --version                      Show the openemr-cmd command version"
  echo "  -s, shell                          Open a docker shell quickly"
  echo "  -e, exec                           Execute commands outside docker"
  echo "  up                                 Execute: docker-compose up -d"
  echo "  down                               Execute: docker-compose down -v"
  echo "  start                              Execute: docker-compose start"
  echo "  stop                               Execute: docker-compose stop"
  echo "  bt, build-themes                   Make changes to any files on your local file system"
	echo "  pl, php-log                        To check PHP error logs"
	echo "  dl, docker-log                     To check docker log"
	echo "  dn, docker-names                   To check docker the running docker names"
	echo "  pr, psr12-report                   To create a report of PSR12 code styling issues"
	echo "  pf, psr12-fix                      To fix PSR12 code styling issues"
	echo "  ltr, lint-themes-report            To create a report of theme styling issues"
	echo "  ltf, lint-themes-fix               To fix theme styling issues"
	echo "  pp, php-parserror                  To check PHP parsing errors"
	echo "  ut, unit-test                      To run unit testing"
	echo "  at, api-test                       To run api testing"
	echo "  et, e2e-test                       To run e2e testing"
	echo "  st, services-test                  To run services testing"
	echo "  ft, fixtures-test                  To run fixtures testing"
	echo "  vt, validators-test                To run validators testing"
	echo "  ct, controllers-test               To run controllers testing"
	echo "  ctt, common-test                   To run common testing"
	echo "  cs, clean-sweep                    To run the entire dev tool suite"
	echo "  cst, clean-sweep-tests             To run only all the automated tests"
	echo "  dr, dev-reset                      To reset OpenEMR only"
	echo "  dri, dev-reset-install             To reset and reinstall OpenEMR"
	echo "  drid, dev-reset-install-demodata   To reset and reinstall OpenEMR with demo data"
	echo "  bs, backup-snapshot                Create a backup snapshot"
	echo "  rs, restore-snapshot               Restore from a snapshot"
	echo "  ls, list-snapshots                 To list the snapshots"
	echo "  lc, list-capsules                  List the capsules"
	echo "  gc, get-capsule                    Copy the capsule from the docker to your host directory"
	echo "  pc, put-capsule                    Copy the capsule into the docker"
	echo "  ev, ensure-version                 Upgrade OpenEMR from specified old version to current version"
	echo "  em, enable-multisite               Turn on support for multisite"
	echo "  dm, disable-multisite              Turn off support for multisite"
	echo "  ec, encoding-collation             Change the database character set and collation"
	exit $USAGE_EXIT_CODE
elif [ "$FIRST_ARG" == '--version' ] || [ "$FIRST_ARG" == '-v' ]
then
	echo "openemer-cmd version 1.0.2, build 2020-07-19"
fi

# See how we were called.
case "$FIRST_ARG" in
	up)
		check_docker_compose_install_or_not
		docker-compose up -d
		;;
	down)
		check_docker_compose_install_or_not
		docker-compose down -v
		;;
	stop)
		check_docker_compose_install_or_not
		docker-compose stop
		;;
	start)
		check_docker_compose_install_or_not
		docker-compose start
		;;
	-s|shell)
		quick_open_a_docker_shell $2
		;;
	-e|exec)
		execute_command_flexible "$@"
		;;
	dl|docker-log)
		check_docker_log
		;;
	dn|docker-names)
		check_docker_names $2
		;;
	bs|backup-snapshot)
		creat_a_backup_snapshot $2
		;;
	rs|restore-snapshot)
		restore_from_a_snapshot $2
		;;
	gc|get-capsule)
		copy_capsule_from_docker_to_host $2 $3
		;;
	pc|put-capsule)
		copy_capsule_from_host_to_docker $2
		;;
	ev|ensure-version)
		ensure_current_ver_with_upgrade_ver $2
		;;
	ec|encoding-collation)
		change_db_character_set_and_collation $2 $3
		;;
	bt)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS build-themes"
		;;
	pl)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS php-log"
		;;
	pr)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS psr12-report"
		;;
	pf)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS psr12-fix"
		;;
	ltr)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS lint-themes-report"
		;;
	ltf)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS lint-themes-fix"
		;;
	pp)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS php-parserror"
		;;
	ut)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS unit-test"
		;;
	at)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS api-test"
		;;
	et)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS e2e-test"
		;;
	st)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS services-test"
		;;
	ft)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS fixtures-test"
		;;
	vt)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS validators-test"
		;;
	ct)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS controllers-test"
		;;
	ctt)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS common-test"
		;;
	cs)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS clean-sweep"
		;;
	cst)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS clean-sweep-tests"
		;;
	dr)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS dev-reset"
		;;
	dri)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS dev-reset-install"
		;;
	drid)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS dev-reset-install-demodata"
		;;
	ls)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS list-snapshots"
		;;
	lc)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS list-capsules"
		;;
	em)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS enable-multisite"
		;;
	dm)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS disable-multisite"
		;;
	*)
		$DOCKER_EXEC_CMD $CONTAINER_ID $SHELL_TYPE "$DEV_TOOLS $FIRST_ARG"
		;;
esac
exit $FINAL_EXIT_CODE
